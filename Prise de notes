React : bibliothèque de composant

nvm : gérer les versions de nodes

Pas de var et de javascript vanilla dans react

Cette semaine :
- fonctions qui retourne du jsx ( de tout en gros )

Hook : fonction qui gère la mise à jour le dom ( commence souvent par 'Use')
Fonctionnent que dans les composants fonctionnels. 
Les hook remplacent la quasi totalité ddes fonctionnalitées de react.

... = spread operator, prend toutes les clés et va les étaler dans un autre objet

index.js : entrée de l'application

remplacer les données statics par des données http

props : servent à passer des informations du composant parent vers le composant enfant
<Expenses items={expenses}/>
Un composant parent gère la logique et le composant enfant gère l'affichage


### 11/02/2023


.then : accessible que de la portée d'ou elle est

fonction JSON retourne aussi une promise

BDD MongoDB

programmation foncitonnelles ( à regarder)

Les requetes http sont des effets de bords 
Le javascript vanilla dans du react aussi

useEffect : react gère les effets de bord

useState : gère l' état local d'un composant ( l'état est simple)

useReducer ; pareil mais retourne une variable et une fonction pour changer la variable

Décrire le fonctionnement des useCallBack()
Effectuer des actions au rendu de mon coposant => placer dans le use effect

La modification d'une dépendance dans un useEffect permet de relancer le useEffect avec les nouveaux composants

Faire un fetch, installer react rooter v6

### 12/01/2023 


Un composant react est une fonction qui retourne du JSX

Dispatch sert à mettre à jour l'état

useReducer créer un objet de cette fonction et va écouter tous les dispatch de cette fonction

``` javascript

const [state, dispatch] = useReducer(myReducer, {test: 'myString'})

const myHandler = () => {
	dispatch({type: 'MODIFY_TEST_STRING', payload: 'nouvelle valeur'})
	//dispatch() fait référence au paramètre de useReducer()
}
```

myAppContext sert à créer une balise de type provider

Apporte des fonctionnalitées supllémentaires à tous ses enfants

``` javascript 

<myAppContext.Provider value=({
	state: state,
	dispatch: dispatch
})>
	{children}
</myAppContext.Provider>
```

createContext permet d'aller sur tout le store

Passer un state et une fonction qui va changer ce state dans un autre composant

Etat compliqué à gérer sur une pyramide.

Redux dans react : https://react-redux.js.org

Reducer doit retourner une mise à jour.

useState avec useContext pour partager un state et un dispatch de manière globale
utiliser le mot store plutot que state.

